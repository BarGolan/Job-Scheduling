This simulator demonstrates the job scheduling problem.
Where each job is a selfish agent and inspires to improve its completion time.
Simulator’s structure:
	1.	A job has a processing time.
	2.	A machine has speed in which it processes the jobs allocated to it, where 1.0 is the unit speed.
	3.	A machine has a policy and it follows it when being allocated with jobs. The different policies are:
	a.	0 – add last.
	b.	1 – add first.
	c.	2 – keeping the jobs scheduled onto the machine sorted from small PT to large PT. 
	d.	3 – keeping the jobs scheduled onto the machine sorted from small PT to large PT. 
	e.	4 – arbitrary priority list.
Input formats:
	1.	Command line arguments – number of machines, policy, speed, number of jobs, round type.
		Both policy and speed are similar o each machine. The PT of each job is random the initial scheduling is
		being done according to the machines’ policy. In addition, it is not possible to invoke policy 4 to the
		machines via this input format.
	2.	File format 1 – a text file in the format of “file format 1” attached with his project.
		The file format (1 / 2), round type, number of machines, number of jobs, a speed and a policy for each machine,
		a processing time for each job. The initial scheduling is being done according to the machines’ policy.
	3.	File format 2 – the same as file format 1 only that the initial scheduling is determined in advance
		and declared within the input file.
Output:
	Printing to the console the BRD being made for each job throughout the rounds until reaching NE or the
	predetermined stopping condition, printing to the console the final schedule in NE, the number of rounds it
	took to get to NE, the minimal makespan, the current makespan and the scheduling quality which is current
	maksepan / minimal makespan.
